{"version":3,"sources":["components/DomTreeFileView/FileView.js","components/DomTreeFileView/FolderView.js","components/DomTreeFileView/DomTreeFileViewHelper.js","components/DomTreeFileView/index.js","components/DomTreeFileViewModal.js","App.js","reportWebVitals.js","index.js"],"names":["FileView","name","level","fileClassName","onFileSelect","style","paddingLeft","className","classNames","onClick","FolderView","node","folderClassName","onFolderSelect","props","useState","expanded","setExpanded","useEffect","nodeName","data-level","renderDomNodes","domTree","folderDomElements","childNodes","forEach","index","nodeType","push","textValue","nodeValue","trim","DomTreeFileView","DomTreeFileViewModal","state","selectedFile","str","format","parser","DOMParser","includes","parseFromString","stringToHtmlDom","href","this","onModalClose","a1","a2","a3","type","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae213f84.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from 'classnames';\nimport \"./FileView.scss\";\n\nexport default function FileView({ name, level,fileClassName,onFileSelect }){\n\n\n  return (\n    <li\n      style={{ paddingLeft: `${level*25}px` }}     \n      className={classNames(\"file-view\",fileClassName)}   \n      onClick={()=>{onFileSelect(level,name)} }\n    >\n      <span className=\"file-img\"></span>\n      <label className=\"file-view-label\">{name}</label>\n    </li>\n  );\n};\n\n","import React, {useState,useEffect} from \"react\";\nimport classNames from 'classnames';\nimport {renderDomNodes} from \"./DomTreeFileViewHelper\";\n\nimport \"./FolderView.scss\";\n\nexport default  function FolderView ({name, node, level,folderClassName,onFolderSelect,...props}) {\n  \nconst [expanded,setExpanded]=useState(props.expanded||false);\n\n  const toggleFolder = () => {\n    setExpanded(!expanded);\n  };\n\n   useEffect(() => {\n    onFolderSelect&&onFolderSelect(level,node,expanded);\n  }, [expanded, onFolderSelect]);\n\n    return (\n      <li\n        \n        className={classNames(\"folder-view\",folderClassName)}      \n      >\n        <div style={{ paddingLeft: `${level*20}px` }}>\n          <span           \n            className = {classNames({\"expanded\":expanded, \"collapsed\":!expanded})}\n            onClick={toggleFolder}\n          ></span>\n          <span className={classNames('folder-img',{\"private\" : node.nodeName === \"HEAD\"})}></span>\n          <label className=\"folder-label\">{name}</label>\n        </div>\n\n         <ul data-level={level} className={classNames({'display-children':expanded,'hide-children':!expanded})}>{renderDomNodes(node, level,props)}</ul>\n      </li>\n    );\n\n}\n\n","import FileView from \"./FileView\";\nimport FolderView from \"./FolderView\";\nexport function renderDomNodes(domTree, level,props) {\n  const folderDomElements = [];\n  const DOM_NODE=1;\n  const TEXT_NODE=3;\n  domTree &&\n    domTree.childNodes.forEach((node,index) => {\n      if (node.nodeType === DOM_NODE) {\n        folderDomElements.push(\n          <FolderView\n            name={node.nodeName}\n            level={level + 1}\n            key={`folder-${level}-${index}`}            \n            node={node}\n            {...props}\n          />\n        );\n      }\n      else if (node.nodeType === TEXT_NODE) {\n        const textValue = node.nodeValue.trim();\n        if (textValue) {\n          folderDomElements.push(\n            <FileView\n              level={level + 1}\n              key={`file-${level}-${index}`}\n              name={textValue}\n              {...props}\n            />\n          );\n        }\n      }\n    });\n\n  return folderDomElements;\n}\n\nexport function stringToHtmlDom(str) {\n    const parser = new DOMParser();\n    let doc;\n\n    if(!str){\n      return doc;\n    }\n     let format;\n    if (\n        str.includes(\"<head>\") ||\n        str.includes(\"<HEAD>\") ||\n        str.includes(\"<html>\") ||\n        str.includes(\"<HTML>\")\n    ) {\n      format= \"text/html\";\n    }else{\n      format= \"text/xml\";\n    }\n    return parser.parseFromString(str, format);\n};\n\n","import React  from \"react\";\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport {renderDomNodes} from \"./DomTreeFileViewHelper\";\nimport \"./FileTreeView.scss\";\n\nfunction DomTreeFileView(props) {\n  const { domTree, className } = props;\n\n  return (\n    <ul data-level=\"0\" className={classNames(\"file-system\",className)}>\n      {renderDomNodes(domTree, 0,props)}\n    </ul>\n  );\n}\n\nDomTreeFileView.propTypes = {\n  domTree: PropTypes.object.isRequired, \n  expended: PropTypes.bool,\n  className: PropTypes.string,\n  fileClassName: PropTypes.string,\n  folderClassName: PropTypes.string, \n  onFolderSelect: PropTypes.func,\n  onFileSelect: PropTypes.func,\n}\n\nexport default DomTreeFileView;\n","import React, { Component } from \"react\";\nimport DomTreeFileView from \"./DomTreeFileView\";\nimport {stringToHtmlDom} from \"./DomTreeFileView/DomTreeFileViewHelper\";\nimport \"./DomTreeFileViewModal.scss\";\n\n\nconst htmlString = `<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>DOM Tree as a File System</title>\n  </head>\n  <body>\n    <h1>An Example Site</h1>\n    <h3>To Demonstrate what some nested nodes might look like</h3>\n    <ul>\n      <li>One</li>\n      <li>Two</li>\n      <li>Three</li>\n    </ul>\n    <p>\n      Some Text\n      <!-- A Comment -->\n      More Text\n    </p>\n  </body>\n</html>\n\n`;\nexport default class DomTreeFileViewModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedFile: null,\n    };\n  }\n\n  render() {\n    const domTree = stringToHtmlDom(htmlString);\n    return (\n      <section className=\"dom-tree-file-modal\">\n        <header className=\"dom-tree-modal-header\">\n          <h4>Title</h4>\n          <a href=\"#\" className=\"modal-close\" onClick={this.props.onModalClose}>\n            <span className=\"sprite sprite-close\" />\n          </a>\n        </header>\n        <section className=\"dom-tree-content-header\">\n          <h2>Label</h2>\n        </section>\n        <div className=\"dom-tree-modal-body\">\n          <DomTreeFileView domTree={domTree} onFileSelect={(a1,a2,a3)=>{\n            debugger\n          }}/>\n        </div>\n        <footer className=\"dom-tree-modal-footer\">\n          <a href=\"#\">Link</a>\n          <button type=\"button\" className=\"button\">\n            Done\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n","import DomTreeFileViewModal from './components/DomTreeFileViewModal';\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n      <DomTreeFileViewModal />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}